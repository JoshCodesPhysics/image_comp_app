version: '3'

tasks:
  check-python:
    desc: Check if required Python version is installed
    cmds:
      - |
        echo "üîç Checking Python requirements..."
        echo "Python version check:"
        python3.10 --version | grep -E "Python 3\.(1[0-9]|[2-9][0-9])" && echo "‚úÖ Python 3.10+ found" || (echo "‚ùå Python 3.10+ required. Current: $(python3.10 --version 2>/dev/null || echo 'not found')" && exit 1)
        echo "‚úÖ Python requirements met!"

  check-node:
    desc: Check if required Node.js and npm are installed
    cmds:
      - |
        echo "üîç Checking Node.js requirements..."
        echo "Node.js version check:"
        node --version | grep -E "v(2[0-9]|[3-9][0-9])" && echo "‚úÖ Node.js 20+ found" || (echo "‚ùå Node.js 20+ required. Current: $(node --version 2>/dev/null || echo 'not found')" && exit 1)
        echo "npm check:"
        npm --version && echo "‚úÖ npm found" || (echo "‚ùå npm not found" && exit 1)
        echo "‚úÖ Node.js requirements met!"

  check-docker:
    desc: Check if Docker is installed and running
    cmds:
      - |
        echo "üîç Checking Docker requirements..."
        docker --version && echo "‚úÖ Docker found" || (echo "‚ùå Docker required but not found" && exit 1)
        docker info > /dev/null 2>&1 && echo "‚úÖ Docker daemon running" || (echo "‚ùå Docker daemon not running" && exit 1)

  check-ports:
    desc: Check if required ports are available
    cmds:
      - |
        echo "üîç Checking port availability..."
        ! lsof -i :5432 > /dev/null 2>&1 && echo "‚úÖ Port 5432 available" || (echo "‚ùå Port 5432 in use" && exit 1)
        ! lsof -i :8000 > /dev/null 2>&1 && echo "‚úÖ Port 8000 available" || (echo "‚ùå Port 8000 in use" && exit 1)
        ! lsof -i :3000 > /dev/null 2>&1 && echo "‚úÖ Port 3000 available" || (echo "‚ùå Port 3000 in use" && exit 1)

  check-all:
    desc: Run all system checks
    deps: [check-python, check-node, check-docker, check-ports]
    cmds:
      - echo "‚úÖ All system requirements met!"

  backend-install:
    desc: Setup Python venv and install dependencies
    deps: [check-python, check-docker, check-ports]
    cmds:
      - echo "üì¶ Setting up Python virtual environment..."
      - python3.10 -m venv .venv
      - .venv/bin/pip install --upgrade pip
      - .venv/bin/pip install -r requirements.txt
      - echo "‚úÖ Python dependencies installed successfully!"

  frontend-install:
    desc: Install frontend dependencies
    deps: [check-node, check-ports]
    cmds:
      - echo "üì¶ Installing frontend dependencies..."
      - cd image-diff-frontend && npm install
      - echo "‚úÖ Frontend dependencies installed successfully!"

  frontend-dev:
    desc: Start frontend development server
    deps: [frontend-install] 
    cmds:
      - echo "üöÄ Starting frontend development server..."
      - cd image-diff-frontend && npm run dev

  postgres-start:
    desc: Start Postgres via Docker
    cmds:
      - sudo docker run --rm -d --name image_diff_db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=image_diff -p 5432:5432 postgres:15

  postgres-stop:
    desc: Stop Postgres container
    cmds:
      - sudo docker stop image_diff_db || true

  server:
    desc: Start FastAPI server with uvicorn
    cmds:
      - .venv/bin/uvicorn app:app --reload --host 0.0.0.0 --port 8000

  startup-full:
    desc: Start all services (Postgres + FastAPI + Frontend)
    cmds:
      - echo "üöÄ Starting full application stack..."
      - task: postgres-start
      - task: backend-install
      - task: frontend-install
      - echo "Backend at http://localhost:8000"
      - echo "Frontend at http://localhost:5173"
      - echo "Press Ctrl+C to stop all services"
      - sleep 3
      - .venv/bin/uvicorn app:app --reload --host 0.0.0.0 --port 8000 &
      - cd image-diff-frontend && npm run dev

  shutdown-full:
    desc: Stop all services (Postgres + any running processes)
    cmds:
      - sudo docker stop image_diff_db || true
      - pkill -f "uvicorn app:app" || true
      - pkill -f "vite" || true
      - echo "All services stopped"

  test:
    desc: Run all test functions
    deps: [backend-install]
    cmds:
      - .venv/bin/python test_functions.py

  format:
    desc: Format code with Black and Prettier
    cmds:
      - echo "üé® Formatting code..."
      - .venv/bin/black app.py
      - cd image-diff-frontend && npm run format
      - echo "‚úÖ Code formatted successfully!"

  format-check:
    desc: Check code formatting without making changes
    cmds:
      - echo "üîç Checking code formatting..."
      - .venv/bin/black --check app.py
      - cd image-diff-frontend && npm run format:check
      - echo "‚úÖ Code formatting is correct!"

  test-spatial:
    desc: Run spatial region difference analysis tests only
    deps: [backend-install]
    cmds:
      - .venv/bin/python -c "from test_functions import test_spatial_difference_regions; test_spatial_difference_regions()"

  test-formats:
    desc: Run image format comparison tests only
    deps: [backend-install]
    cmds:
      - .venv/bin/python -c "from test_functions import test_image_formats; test_image_formats()"

  test-quick:
    desc: Run quick tests (database, image reading, histograms)
    deps: [backend-install]
    cmds:
      - .venv/bin/python -c "from test_functions import test_database_initialization, test_image_reading, test_channel_histogram; test_database_initialization(); test_image_reading(); test_channel_histogram()"

  test-url:
    desc: Run build_diff_url tests only
    deps: [backend-install]
    cmds:
      - .venv/bin/python -c "from test_functions import test_build_diff_url; test_build_diff_url()"

  # Docker tasks
  docker-build:
    desc: Build all Docker images
    cmds:
      - echo "üê≥ Building Docker images..."
      - docker-compose build

  docker-up:
    desc: Start all services with Docker Compose
    cmds:
      - echo "üöÄ Starting all services with Docker..."
      - docker-compose up -d
      - echo "Backend - http://localhost:8000"
      - echo "Frontend - http://localhost:3000"
      - echo "Database - localhost:5432"

  docker-down:
    desc: Stop all Docker services
    cmds:
      - echo "üõë Stopping Docker services..."
      - docker-compose down

  docker-logs:
    desc: View logs from all services
    cmds:
      - docker-compose logs -f

  docker-clean:
    desc: Clean up Docker containers, images, and volumes
    cmds:
      - echo "üßπ Cleaning up Docker resources..."
      - docker-compose down -v --rmi all
      - docker system prune -f

  docker-rebuild:
    desc: Rebuild and restart all services
    deps: [docker-down]
    cmds:
      - task: docker-build
      - task: docker-up